version: '3.9'

services:
  traefik:
    image: traefik:v3
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443
      - --certificatesResolvers.le.acme.email=${LETSENCRYPT_EMAIL}
      - --certificatesResolvers.le.acme.storage=/letsencrypt/acme.json
      - --certificatesResolvers.le.acme.httpChallenge.entryPoint=web
    ports:
      - '${HOST_PORT}:80'
      - '${HTTPS_PORT}:443'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    environment:
      DOMAIN: ${DOMAIN}

  db:
    image: postgres:15
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      BACKEND_PORT: ${BACKEND_PORT}
    labels:
      traefik.enable: 'true'
      traefik.http.routers.backend.rule: 'Host(${DOMAIN}) && PathPrefix(`/api`)'
      traefik.http.services.backend.loadbalancer.server.port: '${BACKEND_PORT}'
    depends_on:
      - db

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      FRONTEND_PORT: ${FRONTEND_PORT}
    labels:
      traefik.enable: 'true'
      traefik.http.routers.frontend.rule: 'Host(${DOMAIN})'
      traefik.http.services.frontend.loadbalancer.server.port: '${FRONTEND_PORT}'
    depends_on:
      - backend

volumes:
  db_data:
  letesencrypt: 