datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id    String @id
  name  String
  users User[]

  @@map("roles")
}

model User {
  id             String          @id @default(uuid()) @db.Uuid
  email          String          @unique
  password_hash  String
  is_verified    Boolean         @default(false)
  role_id        String
  current_credit Int             @default(0) @map("current_credit")
  created_at     DateTime        @default(now())
  role           Role            @relation(fields: [role_id], references: [id])
  sessions       Session[]
  creditLedgers  CreditLedger[]
  usageLogs      UsageLog[]
  conversations  Conversation[]

  @@map("users")
}

model Session {
  id            String   @id @default(uuid()) @db.Uuid
  user_id       String   @db.Uuid
  refresh_token String
  expires_at    DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Add enum for reasoning effort levels
enum ReasoningEffort {
  low
  medium
  high
}

model Model {
  id         String     @id @default(uuid()) @db.Uuid
  api_name   String     @unique
  name       String
  cost       Int
  is_enabled Boolean    @default(true)
  is_inference_model Boolean @default(false) @map("is_inference_model")
  reasoning_effort     ReasoningEffort? @map("reasoning_effort")
  system_message       String?             @map("system_message")
  display_order        Int                 @default(0)
  usageLogs  UsageLog[]

  @@map("models")
}

model CreditLedger {
  id      String   @id @default(uuid()) @db.Uuid
  user_id String   @db.Uuid
  delta   Int
  reason  String
  at      DateTime @default(now())
  user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("credit_ledgers")
}

model UsageLog {
  id                String   @id @default(uuid()) @db.Uuid
  user_id           String   @db.Uuid
  model_id          String   @db.Uuid
  prompt_tokens     Int
  completion_tokens Int
  cost              Int
  at                DateTime @default(now())
  user              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  model             Model    @relation(fields: [model_id], references: [id])

  @@map("usage_logs")
}

// 대화 기록 저장용 모델
model Conversation {
  id         String      @id @default(uuid()) @db.Uuid
  user_id    String      @db.Uuid
  title      String?
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  messages   Message[]
  user       User        @relation(fields: [user_id], references: [id])

  @@map("conversations")
}

model Message {
  id              String       @id @default(uuid()) @db.Uuid
  conversation_id String       @db.Uuid
  role            String
  content         String
  created_at      DateTime     @default(now())
  conversation    Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)

  @@map("messages")
}

// 모델 정의는 이후에 추가하세요. 